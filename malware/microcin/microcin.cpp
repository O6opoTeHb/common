#include "microcin.h"

using namespace std;

void print_microcin_config (const microcin_config& c) {
    cout << "____________________________________________________________________" << endl;
    cout << "url is also dumped to .dec file" << endl;
    cout << "________________________ spoolsv.dll microcin_config ________________________" << endl;
    cout << "url: " << c.url << endl;
    cout << "sleep time: " << c.time << endl;
    cout << "version: " << c.version << endl;
    cout << "target id: " << c.target_id << endl;
}

void parse_microcin_config (const string& fn) {
    microcin_config c;
    ifstream fs(fn, ifstream::binary | ifstream::in);
    int offset = 0;

    // get microcin_config len from file end and set to microcin_config start
    fs.seekg(-4, fstream::end);
    c.len = get_dword(fs);
    if (c.len > 0x1000) {
        offset = -0x14;
        fs.seekg(offset - sizeof(c.len), ifstream::end);
        cout << "__________________________ canary present __________________________" << endl;
        cout << "due to canary presence skipped 0x18 bytes" <<  endl;
        c.len = get_dword(fs);
    }
    offset = offset - sizeof(c.len) - c.len;
    fs.seekg(offset, fstream::end);

    // get xor byte and url len
    c.xor_byte = get_byte(fs);
    uint8_t a[4];
    fs.read((char *)a, 4);
    c.url_len = make_dword(get_len(a, 4, c.xor_byte));

    // decrypt url
    c.url = (uint8_t *)malloc(c.url_len);
    fs.read((char *)c.url, c.url_len);
    c.url = get_content(c.url, c.url_len, c.xor_byte);

    // decrypt sleep time
    c.time = get_word(fs);
    c.time ^= (c.xor_byte << 8) ^ 0x02;

    // decrypt version len
    fs.read((char *)a, 4);
    c.version_len = make_dword(get_len(a, 4, c.xor_byte));

    // decrypt version name
    c.version = (uint8_t *)malloc(c.version_len);
    fs.read((char *)c.version, c.version_len);
    c.version = get_content(c.version, c.version_len, c.xor_byte);

    // decrypt target_id len
    fs.read((char *)a, 4);
    c.target_id_len = make_dword(get_len(a, 4, c.xor_byte));

    // decrypt target_id
    c.target_id = (uint8_t *)malloc(c.target_id_len);
    fs.read((char *)c.target_id, c.target_id_len);
    c.target_id = get_content(c.target_id, c.target_id_len, c.xor_byte);

    dump_to_file(fn + ".dec", c.url, c.url_len);

    print_microcin_config(c);
    delete(c.target_id);
    delete(c.version);
    delete(c.url);
    fs.close();
}