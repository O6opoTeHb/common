#include "mining.h"

using namespace std;

void print_plugin_config(const a_config &ac) {
	cout << "code: " << hex << ac.code << '\n';
  	cout << "hash: ";
  	print_storage_ascii(ac.hash);
	cout << "compressed len: " << hex << ac.compressed_len << '\n';
	cout << "decompressed len: " << hex << ac.decompressed_len << '\n';
  	cout << "compressed: ";
  	print_storage_hex(ac.compressed);
  	cout << "decompressed: ";
  	print_storage_ascii(ac.decompressed);
	cout << "signature len: " << hex << ac.signature_len << '\n';
  	cout << "signature: ";
  	print_storage_hex(ac.signature);
}

int parse_andariel_block(a_config& ac, file& af) {
  try {
	ac.code = af.get_dword();
	ac.stub_5 = af.get_dword();
	ac.decompressed_len = af.get_dword();
	ac.compressed_len = af.get_dword();
	ac.stub_10 = af.get_dword();
	ac.hash = af.get_bytes(0x20);
	ac.stub_34 = af.get_dword();
	ac.signature_len = af.get_dword();
	ac.stub_3C = af.get_dword();
	ac.stub_40 = af.get_dword();
	ac.stub_44 = af.get_dword();
	ac.stub_48 = af.get_dword();
	ac.stub_4C = af.get_dword();
	ac.compressed = af.get_bytes(ac.compressed_len);
	ac.signature = af.get_bytes(ac.signature_len);
	storage dec(ac.decompressed_len);
	ac.decompressed = make_shared<storage>(dec);
	uncompress(reinterpret_cast<Bytef *>(ac.decompressed->data()),
			   &ac.decompressed_len,
			   reinterpret_cast<Bytef *>(ac.compressed->data()),
			   ac.compressed_len);
	return 0;
  } catch (runtime_error e) {
	return 1;
  }

}

void parse_plugin_file(const std::string &fn) {
	file af(fn);
	a_config ac;
	a_config a_next_stage;

	parse_andariel_block(ac, af);
  print_plugin_config(ac);

  	auto r = parse_andariel_block(a_next_stage, af);
  	int i = 0;
  	while (!r) {
	  af.dump_to_file(fn + ".dec." + to_string(i), a_next_stage.decompressed);
	  r = parse_andariel_block(a_next_stage, af);
	  ++i;
  	}
}
